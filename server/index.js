var express = require('express');var mysql = require('mysql');var moment = require('moment');var request = require('request');var querystring = require('querystring');var bodyParser= require('body-parser');var path= require('path');var multiparty = require('connect-multiparty');var fs= require('fs');var xlsx = require('node-xlsx');var app = express();var multipartMiddleware = multiparty();var mysql_config = {    host:'localhost',    user:'root',    password:'123456.',    charset : 'utf8',    database:'ms',    useConnectionPooling: true,    multipleStatements: true //允许多次运行多条查询语句};function handleDisconnection(){  connection = mysql.createConnection(mysql_config);  connection.connect(function(err){    if(err){      setTimeout(function(){handleDisconnection()},1000);      console.log(err);      console.log('\r\n'+moment().format('YYYYMMDD-HHmmss')+'-请求重新连接\r\n');    }else{      console.log('\r\n'+moment().format('YYYYMMDD-HHmmss')+'-重新连接成功\r\n');    }  })  connection.on('error', function(err) {      console.log('db error', err);      if(err.code === 'PROTOCOL_CONNECTION_LOST') {          console.log('db error执行重连:'+err.message);          console.log('\r\n'+moment().format('YYYYMMDD-HHmmss')+'-请求重新连接\r\n');          handleDisconnection();      } else {          throw err;      }  })}handleDisconnection();app.use('/false/', express.static(path.resolve(__dirname, './html'))); //设置读取文件路径// 上传文件大小设置app.use(bodyParser.urlencoded({limit:'50mb',extended:false}));// post请求需设置，支持请求体格式,需要配置请求头 'Content-Type':'application/x-www-form-urlencoded'app.use(bodyParser.json());// 设置文件上传缓存位置app.use(multiparty({uploadDir:'./temp' }));// 解决跨域问题，允许所有访问app.all('*',function (req, res, next) {  res.header('Access-Control-Allow-Origin', '*');  // res.header('Access-Control-Allow-Origin', 'http://192.168.30.190:8080');  res.header('Access-Control-Allow-Headers', 'Content-Type, Content-Length, Authorization, Accept, X-Requested-With , yourHeaderFeild');  res.header('Access-Control-Allow-Methods', 'PUT, POST, GET, DELETE, OPTIONS');  // console.log(req.method);  if (req.method == 'OPTIONS') {    res.sendStatus(200); //让options请求快速返回  }  else {    next();  }})function verifyUse(str){    if(str){        return str;    }else{        return '';    }}var frontRequestUrl = "/produceMS";// 用户登录app.post(frontRequestUrl+'/login', (req,res)=>{    var reqData = req.body;    var sqlQuest = 'select * from user where userID="'+reqData.userID+'"';    // 获取用户未读消息    var queryMessage = (nextFun) => {      var sqlQuest = 'select * from message where userID="'+reqData.userID+'" and status = 0';      connection.query(sqlQuest,function(error,res1,fileds){          if(error){              console.log(error);          }else{            if(res1.length){              nextFun(res1);              // res.send(JSON.stringify({code:200,msg:'登录成功',results:res1[0]}));            }else{              nextFun();            }          }      })    }    connection.query(sqlQuest,function(error,res1,fileds){        if(error){            console.log(error);        }else{            console.log(res1);            if(res1.length){              if(res1[0].type == 4){                res.send(JSON.stringify({code:500,msg:'该用户为生产人员，无系统登录权限',results:res1}));              }else if(res1[0].pwd == reqData.pwd){                var fun = (data) => {                  data?res1[0].messages = data:false;                  res.send(JSON.stringify({code:200,msg:'登录成功',results:res1[0]}));                }                // 获取用户下的通知消息列表                queryMessage(fun);              }else{                res.send(JSON.stringify({code:500,msg:'用户密码错误, 请检查后重试',results:res1}));              }            }else{              res.send(JSON.stringify({code:500,msg:'该用户名不存在, 请检查后重试',results:res1}));            }        }    })})// 用户管理部分var userManage = require('./self_modules/userManage');userManage(app,connection);// 模板管理部分var template = require('./self_modules/template');template(app,connection);// 订单管理var uploadFile = require('./self_modules/plugin/uploadFile');var indent = require('./self_modules/indent');indent(app,multipartMiddleware,fs,moment,connection, uploadFile, xlsx);// 工时管理var workhour = require('./self_modules/workhour');workhour(app,connection);// 生产订单管理var produceIndent = require('./self_modules/produceIndent');produceIndent(app,connection);// 组长功能部分var captain = require('./self_modules/captain');captain(app,connection);var server = app.listen('12600',function(req,res){    // console.log(server.address());    console.log('server start from '+server.address().address+server.address().port);})