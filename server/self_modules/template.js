/** 模板功能*/const template = (app,connection) =>{  var frontRequestUrl = "/produceMS";  connection = require('../config/mysqlconnect.js');  // 获取所有模板列表  app.get([frontRequestUrl+'/listAllTemplate'],function(req,res){      var name = req.query.keyword?req.query.keyword:'';      var parse = req.query;      // var sqlQuest = 'select *, `procedure` from template where name like "%'+name+'%"';      // var sqlQuest = 'select *, `procedure` from template left join user ';      // 将template中duty里userID组合成的字符转为用户姓名      // var sqlQuest = "select template.id,template.name, template.procedure,replace(GROUP_CONCAT(userName),',',' ') as duty  from template,user where duty like CONCAT('%',userID,'%') and  ifDelete = ? GROUP BY template.id";      var sqlQuest = "select template.id,template.name, template.procedure,replace(GROUP_CONCAT(userName),',',' ') as duty  from template,user where FIND_IN_SET(userID, REPLACE(duty,' ',',')) and  ifDelete = ? GROUP BY template.id order by id+0";      connection.latest().query(sqlQuest,[parse.ifDelete||0], function(error,res1,fileds){          if(error){              connection.print(error);              res.send(JSON.stringify({code:500,msg:'查询模板数据失败',results:res1}));          }else{              if(res1.length){                  res.send(JSON.stringify({code:200,msg:'查询模板数据成功',results:res1}));              }else{                  res.send(JSON.stringify({code:500,msg:'暂无模板信息',results:res1}));              }          }      })  })  // 更新模板信息  app.post(frontRequestUrl+'/updateTemplate',function(req,res){      var parse = req.body;      var sqlQuest = "update template set name=?,`procedure`=?,duty=? where id = ?";      // 需要mysql语句处理的字段，可以不必拼接，直接放入下面的自动拼接语句里      var sqlParam = [parse.name, parse.procedure, parse.duty, parse.id];      connection.latest().query(sqlQuest,sqlParam,function(error,res1){          if(error){              connection.print(error);              res.send(JSON.stringify({code:500,'msg':'更新模板信息失败'}));          }else{              res.send(JSON.stringify({code:200,'msg':'更新模板信息成功'}));          }      })  })  // 新增模板  app.post(frontRequestUrl+'/addTemplate',function(req,res){      var parse = req.body;      var sqlQuest0 = "select * from template where id = '"+parse.id+"'";      connection.latest().query(sqlQuest0,function(error,res0){        if(error){          connection.print(error);return;        }        if(res0.length!=0){           res.send(JSON.stringify({code:500,'msg':'该模板编号已存在，请重新设置'}));        }else{          // 新增模板          var sqlQuest = "insert into template(id, name, `procedure`, duty) values(?, ?, ?, ?)";          var sqlParam = [parse.id, parse.name, parse.procedure, parse.duty];          connection.latest().query(sqlQuest,sqlParam,function(error,res1){              if(error){                  connection.print(error);                  res.send(JSON.stringify({code:500,'msg':'新增模板失败'}));              }else{                  //如果模板创建完成，返回数据，应创建对应的流程表                  connection.latest().query("select * from template where id = ?",[res1.insertId],function(error,res2){                      if(error){                          connection.print(error);                          res.send(JSON.stringify({code:500,'msg':'新增模板失败'}));                      }else{                          res.send(JSON.stringify({code:200,'msg':'新增模板成功', results: res2[0]}));                      }                  })              }          })        }      })  })  // 删除模板(字段区分，不删除记录)  app.post(frontRequestUrl+'/deleteTemplate',function(req,res){      var parse = req.body;      // var sqlQuest = "delete from template where id = '"+parse.id+"'";      if(parse.id=='all'){        connection.latest().query('delete from template where ifDelete=1',function(error2,res2){            if(error2){                connection.print(error2);                res.send(JSON.stringify({code:500,'msg':'清空模板失败'}));            }else{                res.send(JSON.stringify({code:200,'msg':'清空模板成功'}));            }        })      }else{      var sqlQuest = "select ifDelete from template where id='"+parse.id+"'";        connection.latest().query(sqlQuest,function(error,res1){            if(error){                connection.print(error);                res.send(JSON.stringify({code:500,'msg':'删除模板失败'}));            }else{              // 判断是标记删除，还是彻底删除              if(res1[0].ifDelete==1){                var sqlQuest2 = "delete from template where id='"+parse.id+"' and ifDelete=1";                connection.latest().query(sqlQuest2,function(error2,res2){                    if(error2){                        connection.print(error2);                        res.send(JSON.stringify({code:500,'msg':'彻底模板失败'}));                    }else{                        res.send(JSON.stringify({code:200,'msg':'彻底模板成功'}));                    }                })              }else{                var sqlQuest2 = "update template set ifDelete = 1,id = concat(id,'-del') where id = '"+parse.id+"'";                connection.latest().query(sqlQuest2,function(error2,res2){                    if(error2){                        connection.print(error2);                        res.send(JSON.stringify({code:500,'msg':'删除模板失败'}));                    }else{                        res.send(JSON.stringify({code:200,'msg':'删除模板成功'}));                    }                })              }            }        })      }  })  // 还原模板  app.post(frontRequestUrl+'/recycleTemplate',function(req,res){      var parse = req.body;      // var sqlQuest = "delete from template where id = '"+parse.id+"'";      var sqlQuest = "update template set ifDelete = 0, id = replace(id,'-del','') where id = '"+parse.id+"'";      connection.latest().query(sqlQuest,function(error,res1){          if(error){              connection.print(error);              res.send(JSON.stringify({code:500,'msg':'还原模板失败'}));          }else{              res.send(JSON.stringify({code:200,'msg':'还原模板成功'}));          }      })  })/**** 设备*/  // 获取所有设备列表  app.get([frontRequestUrl+'/listAllEquipment'],function(req,res){      var name = req.query.keyword?req.query.keyword:'';      var parse = req.query;      // var sqlQuest = 'select *, `procedure` from template where name like "%'+name+'%"';      // var sqlQuest = 'select *, `procedure` from template left join user ';      // 将template中duty里userID组合成的字符转为用户姓名      var sqlQuest = "select * from equipment where ifDelete=? order by id";      connection.latest().query(sqlQuest,[parse.ifDelete||0], function(error,res1,fileds){          if(error){              connection.print(error);              res.send(JSON.stringify({code:500,msg:'查询设备数据失败',results:res1}));          }else{              if(res1.length){                  res.send(JSON.stringify({code:200,msg:'查询设备数据成功',results:res1}));              }else{                  res.send(JSON.stringify({code:500,msg:'暂无设备信息',results:res1}));              }          }      })  })  // 更新设备信息  app.post(frontRequestUrl+'/updateEquipment',function(req,res){      var parse = req.body;      var sqlQuest = "update equipment set name=?,remark=? where id = ?";      // 需要mysql语句处理的字段，可以不必拼接，直接放入下面的自动拼接语句里      var sqlParam = [parse.name, parse.remark, parse.id];      connection.latest().query(sqlQuest,sqlParam,function(error,res1){          if(error){              connection.print(error);              res.send(JSON.stringify({code:500,'msg':'更新设备信息失败'}));          }else{              res.send(JSON.stringify({code:200,'msg':'更新设备信息成功'}));          }      })  })  // 新增设备  app.post(frontRequestUrl+'/addEquipment',function(req,res){      var parse = req.body;      // 新增设备      var sqlQuest = "insert into equipment(name, remark) values(?, ?)";      var sqlParam = [parse.name, parse.remark];      connection.latest().query(sqlQuest,sqlParam,function(error,res1){          if(error){              connection.print(error);              res.send(JSON.stringify({code:500,'msg':'新增设备失败'}));          }else{              //如果设备创建完成，返回生成数据，应创建对应的流程表              connection.latest().query("select * from template where id = ?",[res1.insertId],function(error,res2){                  if(error){                      connection.print(error);                      res.send(JSON.stringify({code:500,'msg':'新增设备失败'}));                  }else{                      res.send(JSON.stringify({code:200,'msg':'新增设备成功', results: res2[0]}));                  }              })          }      })  })  // 删除设备(不删除记录)  app.post(frontRequestUrl+'/deleteEquipment',function(req,res){      var parse = req.body;      // var sqlQuest = "delete from template where id = '"+parse.id+"'";      if(parse.id=='all'){        connection.latest().query('delete from equipment where ifDelete=1',function(error2,res2){            if(error2){                connection.print(error2);                res.send(JSON.stringify({code:500,'msg':'清空设备失败'}));            }else{                res.send(JSON.stringify({code:200,'msg':'清空设备成功'}));            }        })      }else{      var sqlQuest = "select ifDelete from equipment where id='"+parse.id+"'";        connection.latest().query(sqlQuest,function(error,res1){            if(error){                connection.print(error);                res.send(JSON.stringify({code:500,'msg':'删除设备失败'}));            }else{              // 判断是标记删除，还是彻底删除              if(res1[0].ifDelete==1){                var sqlQuest2 = "delete from equipment where id='"+parse.id+"' and ifDelete=1";                connection.latest().query(sqlQuest2,function(error2,res2){                    if(error2){                        connection.print(error2);                        res.send(JSON.stringify({code:500,'msg':'彻底删除设备失败'}));                    }else{                        res.send(JSON.stringify({code:200,'msg':'彻底删除设备成功'}));                    }                })              }else{                var sqlQuest2 = "update equipment set ifDelete = 1 where id = '"+parse.id+"'";                connection.latest().query(sqlQuest2,function(error2,res2){                    if(error2){                        connection.print(error2);                        res.send(JSON.stringify({code:500,'msg':'删除设备失败'}));                    }else{                        res.send(JSON.stringify({code:200,'msg':'删除设备成功'}));                    }                })              }            }        })      }  })  // 还原设备  app.post(frontRequestUrl+'/recycleEquipment',function(req,res){      var parse = req.body;      // var sqlQuest = "delete from template where id = '"+parse.id+"'";      var sqlQuest = "update equipment set ifDelete = 0 where id = '"+parse.id+"'";      connection.latest().query(sqlQuest,function(error,res1){          if(error){              connection.print(error);              res.send(JSON.stringify({code:500,'msg':'还原模板失败'}));          }else{              res.send(JSON.stringify({code:200,'msg':'还原模板成功'}));          }      })  })}module.exports = template;