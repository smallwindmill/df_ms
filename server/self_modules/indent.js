/** 订单功能*/const exportData = require("./plugin/exportData");const indent = (app,multipartMiddleware,fs,moment,connection,uploadFile, xlsx, countFactor, path) =>{  var frontRequestUrl = "/produceMS";  var myExportData = new exportData(fs, path, connection);  // 上传excel文件新增订单  app.post(frontRequestUrl+'/uploadExcelForAddIndent', multipartMiddleware,function(req,res){      var file = req.files.file;      var userID = req.body.id;      // connection.print(file,req.body);      var nextFun = (file_path) =>{          var sheets = xlsx.parse(file_path);//获取到所有sheet          var sheet = sheets[0];          var total=success=fail=0;//数据统计          var failArr = [];          // type 1 模板不存在          var importDataLen = sheet['data'].length - 1;          sheet['data'] = sheet['data'].filter(self=>{return self.length!=0});          for(let rowId in sheet['data']){              var row=sheet['data'][rowId];              if(rowId==0)continue;              total++;              var procedure = duty ='';              if(row.length){                // connection.print(rowId, row);                var row_dir = row;                //var sqlQuest0 = "select * from template where id = '"+row[row.length-1]+"'";                var sqlQuest0 = "select * from template where id = '"+row[7]+"'";                // 查询对应的模板是否存在                (function(row){                  connection.latest().query(sqlQuest0,[],function(error,res0){                    // connection.print(row);                    if(error){                      connection.print(error);return;                    }                    if(res0.length){                      // connection.print(res0[0].duty.split(' '));                      var procedureArr = res0[0].procedure.replace(/ $/,'').replace(/^ /,'').split(' ');                      var userArr = res0[0].duty.replace(/ $/,'').replace(/^ /,'').split(' ');                      // 添加订单记录                      var sqlQuest2 = "start transaction;insert into indent(name,erp, materialCode,materialName,planNum,planOnline,planFinishDate,priority,ifNew,remark,templateID,status) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";                      connection.print('*********************start transaction*******************');                      // var sqlQuest2 = "insert into indent(name,erp, materialCode,materialName,planNum,planFinishDate,planOnline,actualStart,priority,ifNew,remark,templateID,procedure,duty,ifOutsource,feedback,status) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";                      //var sqlParam2 = [res0.name, row[0], row[1], row[2], row[3], row[4].replace(/-/g,'.'), row[5].replace(/-/g,'.'), row[6].replace(/-/g,'.'), row[7].replace(/-/g,'.'), row[8], row[9], row[10],0];                      // connection.print(row[0] );                      // 判断上传的数据类型，转换为日期格式                      row[0] = row[0]?row[0]:'';                      var planFinishDate, planOnline;                      // connection.print(typeof(row[0]));                      if(new Date(row[0]).getDate()){                        if(typeof(row[0])=='string'){                            planFinishDate = moment(new Date(row[0])).format('YYYY.MM.DD');                        }else{                            planFinishDate = moment(new Date(1900, 0, row[0]-1)).format('YYYY.MM.DD');                        }                      }else{                        planFinishDate = '';                      }                      if(new Date(row[1]).getDate()){                        if(typeof(row[1])=='string'){                            planOnline = moment(new Date(row[1])).format('YYYY.MM.DD');                        }else{                            planOnline = moment(new Date(1900, 0, row[1]-1)).format('YYYY.MM.DD');                        }                      }else{                        planOnline = '';                      }                      // connection.print(planFinishDate);                      var sqlParam2 = [res0[0].name2, row[2], row[3], row[4], row[6], planOnline, planFinishDate, row[8], row[9], row[5], row[7], 0];                      // 根据订单开始时间设置权重                        //countFactor(row[6].replace(/-/g,'.'));                        countFactor(planFinishDate);                        // connection.print(sqlParam2);                        // connection.print("rowId1===",rowId);                        connection.latest().query(sqlQuest2,sqlParam2,function(error,res1){                          if(error){                            connection.redlog(error);                            // connection.print(error,res1);                            connection.print('roll back!!!!!!!!!');                            connection.latest().query('rollback;commit;');                            fail++;                            failArr.push({index: rowId*1+1, erp:row[2], name: row[4]});                            if(rowId == sheet['data'].length-1){                                connection.print('新增订单失败，共'+total+'个订单',success,fail);                                connection.latest().query('commit');                                res.send(JSON.stringify({code:500,'msg':'新增订单失败，请检查Excel填写是否正确', results: {total: total,success: success, fail: fail, failArr: failArr}}));                            }                          }else{                              // 添加流程记录                              // 方法一（暂废）                              /*for(let i = 0,len = procedureArr.length;i < len;i++){                                let dealProcedure = (function(rowId){                                  var sqlQuest3 = "insert into `procedure`(indentID, name, materialCode,materialName,duty,status) values(?, ?, ?, ?, ?, ?)";                                  // var sqlParam3 = [res1.insertId, procedureArr[i], row[2], row[3], userArr[i], 0];                                  //var sqlParam3 = [res1.insertId, procedureArr[i], row[1], row[2], userArr[i], 0];                                  connection.print(res1);                                  var sqlParam3 = [res1.insertId, procedureArr[i], row[3], row[4], userArr[i], 0];                                  connection.latest().query(sqlQuest3,sqlParam3,function(error,res1){                                    if(error){                                      connection.print(error);                    connection.print('roll back!!!!!!!!!');                                      // connection.latest().query('rollback;');                                    }else{                                      if(i == procedureArr.length-1){                                        success++;                                      }                                      if(rowId == sheet['data'].length-1){                                        if(i == procedureArr.length-1){                                          connection.latest().query('commit');                                          res.send(JSON.stringify({code:200,'msg':'新增订单成功', results: {total: total,success: success, fail: fail}}));                                        }                                      }                                    }                                  })                                })(rowId)                              }*/                              // 方法二                              let dealProcedure = (i, rowId) => {                                  var sqlQuest3 = "insert into `procedure`(indentID, name, materialCode,materialName,duty,status) values(?, ?, ?, ?, ?, ?)";                                  // var sqlParam3 = [res1.insertId, procedureArr[i], row[2], row[3], userArr[i], 0];                                  //var sqlParam3 = [res1.insertId, procedureArr[i], row[1], row[2], userArr[i], 0];                                  // connection.print(res1, res1[1], res1[1].insertId);                                  var sqlParam3 = [res1[1].insertId, procedureArr[i], row[3], row[4], userArr[i], 0];                                  connection.latest().query(sqlQuest3,sqlParam3,function(error1,res1){                                    if(error1){                                      connection.redlog('添加流程数据失败：',error1);                                      connection.print('roll back!!!!!!!!!');                                      connection.latest().query('rollback;commit;');                                      /*if(i == procedureArr.length-1){                                        fail++;                                      }*/                                      fail++;                                      failArr.push({index: rowId*1+1, erp:row[2], name: row[4]});                                    }else{                                      // 如果未处理完成流程，前进一步                                      if(i < procedureArr.length-1){                                        i++;                                        dealProcedure(i, rowId);                                      }else if(i == procedureArr.length-1){                                        success++;                                        connection.print(fail, success, sheet['data'].length);                                        connection.print('rowId2===', rowId);                                        connection.print(rowId == sheet['data'].length-1 , (fail+success == sheet['data'].length-1));                                        if(fail+success == sheet['data'].length-1){                                        // if(rowId == sheet['data'].length-1 && (fail+success == sheet['data'].length-1)){                                            connection.print('新增订单成功，共'+total+'个订单');                                            connection.latest().query('commit');                                            res.send(JSON.stringify({code:200,'msg':'新增订单成功', results: {total: total,success: success, fail: fail, failArr: failArr}}));                                        }                                      }                                    }                                  })                              };                              dealProcedure(0, rowId);                            }                        })                    }else{                      connection.print('新增订单失败,编号为'+row[7]+'的模板不存在');                      fail++;                      failArr.push({index:(rowId*1+1), erp:row[2], name: row[4], type:1});                      // res.send(JSON.stringify({code:500,'msg':'新增订单失败,编号为'+row[7]+'的模板不存在', results: '', failArr: failArr}));                    }                  })                })(row)              }          }      }      uploadFile.storageFile(path,file,fs,moment,connection,userID,nextFun);  })  // 删除订单信息，用字段标识，不从数据库移除  app.post(frontRequestUrl+'/deleteIndent',function(req,res){      var parse = req.body;      var sqlQuest = "select ifDelete from indent where id='"+parse.id+"'";      if(parse.id=='all'){          var sqlQuest2 = "start transaction;delete from indent where ifDelete=1;delete from `procedure` where indentID not in (select id from indent);delete from `proceduredetail` where pid not in (select id from `procedure`);";          connection.print('*********************start transaction*******************');          connection.latest().query(sqlQuest2, [parse.id], function(error2,res2){              if(error2){                  connection.redlog(error2);                  connection.print('roll back!!!!!!!!!');                  connection.latest().query('rollback;commit;');                  res.send(JSON.stringify({code:500,'msg':'清空订单失败'}));              }else{                connection.latest().query('commit');                res.send(JSON.stringify({code:200,'msg':'清空订单成功'}));              }          })      }else{         connection.latest().query(sqlQuest,function(error,res1){              if(error){                  connection.print(error);                  res.send(JSON.stringify({code:500,'msg':'删除订单失败'}));              }else{                // 判断是标记删除，还是彻底删除                if(res1[0] && res1[0].ifDelete==1){                  // 删除订单时也应删除对应的流程表                  var sqlQuest2 = "start transaction;delete from indent where id=? and ifDelete=1;delete from `procedure` where indentID not in (select id from indent);delete from `procedureDetail` where pid not in (select id from `procedure`);";                  connection.print('*********************start transaction*******************');                  connection.latest().query(sqlQuest2, [parse.id], function(error2,res2){                      if(error2){                          connection.redlog("彻底删除订单f==", error2);                          connection.print('roll back!!!!!!!!!');                          connection.latest().query('rollback;commit;');                          res.send(JSON.stringify({code:500,'msg':'彻底删除订单失败'}));                      }else{                        connection.latest().query('commit');                        connection.print("彻底删除订单s==", parse.id);                        res.send(JSON.stringify({code:200,'msg':'彻底删除订单成功'}));                      }                  })                }else{                  var sqlQuest2 = "update indent set ifDelete= 1,erp = concat(erp,'-del') where id='"+parse.id+"'";                  connection.latest().query(sqlQuest2,function(error2,res2){                      if(error2){                          connection.print("删除订单f==", error2);                          res.send(JSON.stringify({code:500,'msg':'删除订单失败'}));                      }else{                          connection.print("删除订单s==", parse.id);                          res.send(JSON.stringify({code:200,'msg':'删除订单成功'}));                      }                  })                }              }          })      }  })  // 还原订单信息  app.post(frontRequestUrl+'/recycleIndent',function(req,res){      var parse = req.body;      var sqlQuest = "update indent set ifDelete= 0,erp = replace(erp,'-del','') where id='"+parse.id+"'";      connection.latest().query(sqlQuest,function(error,res1){          if(error){              connection.print("还原订单f==", error);              res.send(JSON.stringify({code:500,'msg':'还原订单失败'}));          }else{              connection.print("还原订单s==", parse.id);              res.send(JSON.stringify({code:200,'msg':'还原订单成功'}));          }      })  })  // 获取所有订单列表(根据时间段查询、erp查询、id查询)  app.get([frontRequestUrl+'/listAllIndentByDate', frontRequestUrl+'/listAllIndentById'],function(req,res){      var startDate = req.query.startDate?req.query.startDate:'';      var endDate = req.query.endDate?req.query.endDate:'';      var id = req.query.id?req.query.id:'';      var erp = req.query.erp?req.query.erp:'';      var ifDelete = req.query.ifDelete?req.query.ifDelete:0;      startDate = startDate.replace(/-/g,'.');      endDate = endDate.replace(/-/g,'.');      // var sqlQuest = 'select * from indent';// where userName like "%'+userName+'%"';      var sqlQuest = '';      var sqlParam = '';      /*if(id){        sqlQuest = 'select * from `procedure` a inner join indent b on a.indentID = b.id where b.id=? and ifDelete = ?';// where userName like "%'+userName+'%"';        sqlParam = [id, ifDelete];      }else if(erp){        sqlQuest = 'select * from `procedure` a inner join indent b on a.indentID = b.id where b.erp = ? and ifDelete = ?';// where userName like "%'+userName+'%"';        sqlParam = [erp, ifDelete];      }else if(startDate){        sqlQuest = 'select * from `procedure` a inner join indent b on a.indentID = b.id where (planOnline >= ? and planOnline <= ?) and ifDelete = ?';// where userName like "%'+userName+'%"';        sqlParam = [startDate.replace(/-/g,'.'), endDate.replace(/-/g,'.'), ifDelete];      }else{        sqlQuest = 'select *,a.status as status from `procedure` a inner join indent b on a.indentID = b.id and ifDelete = ?';        sqlParam = [ifDelete];      }*/      if(id){        sqlQuest = 'select * from indent  where id=? and ifDelete = ? order by indent.planOnline';// where userName like "%'+userName+'%"';        sqlParam = [id, ifDelete];      }else if(erp){        sqlQuest = 'select * from indent  where erp = ? and ifDelete = ? order by indent.planOnline';// where userName like "%'+userName+'%"';        sqlParam = [erp, ifDelete];      }else if(startDate){        sqlQuest = 'select * from indent  where (planOnline >= ? and planOnline <= ?) or (actualStart>=? and actualStart <= ?) or (actualFinish>=? and actualFinish <= ?) and ifDelete = ? order by indent.planOnline';// where userName like "%'+userName+'%"';        sqlParam = [startDate, endDate, startDate, endDate, startDate, endDate, ifDelete];      }else{        sqlQuest = 'select * from indent  where ifDelete = ? order by indent.planOnline';        sqlParam = [ifDelete];      }      connection.latest().query(sqlQuest,sqlParam,function(error,res1,fileds){          // connection.print(sqlQuest, sqlParam);          if(error){              connection.print(error);              res.send(JSON.stringify({code:500,msg:'查询订单数据失败',results:res1}));          }else{              if(res1.length){                  res.send(JSON.stringify({code:200,msg:'查询订单数据成功',results:res1}));              }else{                  res.send(JSON.stringify({code:200,msg:'暂无订单信息',results:res1}));              }          }      })  })  // 获取所有订单状态列表(根据时间段查询)  app.get([frontRequestUrl+'/listAllIndentStatusByDate', frontRequestUrl+'/listIndentById'],function(req,res){      var userName = req.query.keyword?req.query.keyword:'';      var startDate = req.query.startDate?req.query.startDate:'';      var endDate = req.query.endDate?req.query.endDate:'';      var id = req.query.id?req.query.id:'';      var erp = req.query.erp?req.query.erp:'';      startDate = startDate.replace(/-/g,'.');      endDate = endDate.replace(/-/g,'.');      // var sqlQuest = 'select * from indent';// where userName like "%'+userName+'%"';      // id,name,erp,materialCode,materialName,userName as duty,`procedure`, status      var sqlQuest = '';var sqlParam = '';       if(startDate){        // sqlQuest = 'select a.*, indent.erp, indent.ifNew, indent.priority, user.userName as duty from `procedure` a inner join indent on a.indentID = indent.id  left join user on a.duty = user.userID where (indent.planOnline >= ? and indent.planOnline <= ?) and ifDelete = 0 order by indentID, a.id';        sqlQuest = 'select  a.*,a.name as `procedure`, indent.erp, indent.planNum, indent.planOnline, indent.planFinishDate, indent.actualStart, indent.actualFinish, indent.ifNew, indent.priority, indent.templateID, indent.status as pstatus, user.userName as duty from `procedure` a inner join indent on a.indentID = indent.id left join user on a.duty = user.userID where  (indent.planOnline >= ? and indent.planOnline <= ?) or (indent.actualStart >= ? and indent.actualStart <= ?)  or (indent.actualFinish >= ? and indent.actualFinish <= ?) and ifDelete = 0 order by indentID, a.id';        sqlParam = [startDate, endDate, startDate, endDate, startDate, endDate];      }else{        sqlQuest = 'select  a.*, a.name as `procedure`, indent.erp, indent.planNum, indent.planOnline, indent.planFinishDate, indent.actualStart, indent.actualFinish, indent.ifNew, indent.priority, indent.templateID, indent.status as pstatus, user.userName as duty from `procedure` a inner join indent on a.indentID = indent.id left join user on a.duty = user.userID where ifDelete = 0 order by indentID, a.id';        // select userName as duty,a.* from `procedure` a inner join indent on a.indentID = indent.id left join user on a.duty = user.userID      }      connection.latest().query(sqlQuest, sqlParam, function(error,res1,fileds){          if(error){              connection.print(error);              res.send(JSON.stringify({code:500,msg:'查询订单状态失败',results:res1}));          }else{            // connection.print(res1);              if(res1.length){                  res.send(JSON.stringify({code:200,msg:'查询订单状态成功',results:res1}));              }else{                  res.send(JSON.stringify({code:200,msg:'暂无订单信息',results:res1}));              }          }      })  })  // 获取生产面板的订单数据(根据时间段查询)  app.get([frontRequestUrl+'/listShowPageData'],function(req,res){      // var sqlQuest = 'select * from indent';// where userName like "%'+userName+'%"';      // id,name,erp,materialCode,materialName,userName as duty,`procedure`, status      // var sqlQuest = 'select DISTINCT * from indent a left join `procedure` b on a.id = b.indentID where b.status != 0 GROUP BY a.id';      //var sqlQuest = 'select * from (select DISTINCT c.userName as duty,b.*,a.erp, a.planNum, a.actualStart,a.planFinishDate,a.ifNew,a.priority,a.remark from indent a left join `procedure` b on a.id = b.indentID LEFT JOIN user c on b.duty = c.userID  where a.ifDelete = 0 order by a.status,a.id) yy GROUP BY yy.id';      var sqlQuest = 'select * from (select DISTINCT c.userName as myduty,a.remark as myRemark, b.*,a.erp, a.planNum, a.actualStart,a.planFinishDate,a.ifNew,a.priority,a.status as pstatus from indent a left join `procedure` b on a.id = b.indentID LEFT JOIN user c on b.duty = c.userID  where a.ifDelete = 0 and a.status!=2 order by b.indentID,b.status desc,b.id desc) yy group by yy.indentID';      connection.latest().query(sqlQuest, function(error,res1,fileds){          if(error){              connection.print(error);              res.send(JSON.stringify({code:500,msg:'查询订单状态失败',results:res1}));          }else{            // connection.print(res1);              if(res1.length){                  res.send(JSON.stringify({code:200,msg:'查询订单状态成功',results:res1}));              }else{                  res.send(JSON.stringify({code:200,msg:'暂无订单信息',results:res1}));              }          }      })  })  // 计算订单工时  var countIndentWorkTime = (indentID) => {    // 该流程所用的时间（五位小数）    /*    UPDATE workhour,(SELECT DISTINCT indent.id,countHour FROM indent  INNER JOIN (SELECT indentID, sum(countHour) AS countHour, sum(countWorker) AS countWorker FROM `procedure` GROUP BY indentID  ) a ON indent.id = a.indentID ) ff SET workhour.countHour = ff.countHour  where workhour.indentID = ff.id    更新订单工时语句    update `procedure` a,(select sum(hourcount) as ithour,sum(workercount) as itworker, pid from procedureDetail) b set countWorker = b.itworker, countHour = b.ithour where a.id = b.pid  更新流程工时语句    */    // var sqlQuest = 'insert into workhour(indentID, erp,materialCode,planNum,countHour,countWorkers) (select indentID, erp,materialCode,planNum,countHour,countWorkers from indent INNER JOIN  (select sum(countHour) as countHour,indentID,countWorkers from `procedure` INNER join (select sum(workercount) as countWorkers,pid from proceduredetail group by pid) pro_de  on pro_de.pid = `procedure`.id GROUP BY indentID) a on  indent.id = a.indentID where id = ?);select actulStartTime from indent where id=?';    var sqlQuest = 'insert into workhour(indentID, erp,materialCode,planNum,countHour,countWorkers) (select distinct indentID, erp,materialCode,planNum,countHour,countWorker from indent INNER JOIN  (select indentID,sum(countHour) as countHour,sum(countWorker) as countWorker from `procedure` group by indentID ) a on  indent.id = a.indentID where id = ?);select actualFinish as actualStart from indent where id=?';    var sqlParam = [indentID, indentID];    connection.latest().query(sqlQuest,sqlParam,function(error,res1){        if(error){            connection.print(error);        }else{          // 根据订单创建时间的权重计算          connection.print(res1[1][0]);          var year = moment(new Date(res1[1][0].actualStart)).format('YYYY');          var month = moment(new Date(res1[1][0].actualStart)).format('MM');          // var sqlQuest = 'update workhour set factor = (select id from factor where year = ? and month = ? ) where indentID = ?;update workhour set singleHour = countHour/planNum,cost = (select a.factor from factor a,workhour b where a.id = b.factor and b.indentID = ?)*singleHour where indentID = ?';          // 判断当前权重因子是否存在, 存在多个时只获取一个，避免之后报错          countFactor(res1[1][0].actualStart);          var sqlQuest2 = 'update workhour set factor = (select id from factor where year = ? and month = ? limit 1) where indentID = ?;select distinct a.factor from factor a,workhour b where a.id = b.factor and b.indentID = ?';          var sqlParam2 = [year, month, indentID, indentID, indentID];          connection.latest().query(sqlQuest2,sqlParam2,function(error2,res2){              if(error2){                  connection.print(error2);              }else{                  var sqlQuest3 = 'update workhour set singleHour = countHour/planNum,cost = ?*singleHour where indentID = ?';                  var sqlParam3 = [res2[1][0].factor||41, indentID];                  connection.print(sqlQuest3, sqlParam3, res2[1][0].factor);                  connection.latest().query(sqlQuest3,sqlParam3,function(error3,res3){                      if(error3){                          connection.print(error3);                      }else{                         connection.print('**************************id为'+indentID+'的订单已完成，工时统计也完成');                      }                  })              }          })           // connection.print('id为'+pid+'的订单已完成，工时统计也完成');        }    })  }  // 更新订单信息(计算订单工时)  app.post(frontRequestUrl+'/updateIndentInfo',function(req,res){      var parse = req.body;      // var sqlQuest = "update indent set planFinishDate = ?,planOnline = ?,actualStart=?,actualFinish=?,priority=?,ifNew=?,ifOutsource=?,duty=?,status = ?, remark=? where id = ?";      // 需要mysql语句处理的字段，可以不必拼接，直接放入下面的自动拼接语句里      var planFinishDate = parse.planFinishDate;      var planOnline = parse.planOnline;      var actualStart = parse.actualStart;      var actualFinish = parse.actualFinish;      if(planFinishDate) planFinishDate = planFinishDate.replace(/-/g,'.');      if(planOnline) planOnline = planOnline.replace(/-/g,'.');      if(actualStart) actualStart = actualStart.replace(/-/g,'.');      if(actualFinish) actualFinish = actualFinish.replace(/-/g,'.');      //      var sqlQuest = "update indent set planNum=?, planFinishDate = ?,planOnline = ?,actualStart=?,actualFinish=?,priority=?,ifNew=?,ifOutsource=?, remark=? where id = ?";      var sqlParam = [parse.planNum, planFinishDate, planOnline, actualStart, actualFinish, parse.priority, parse.ifNew, parse.ifOutsource, parse.remark, parse.id];      if(parse.status == 2 ){          sqlQuest = 'select * from `procedure` where indentID = ? and status != 2';          sqlParam = [parse.id];          connection.latest().query(sqlQuest, sqlParam, function(error8,res8){            if(error8){              connection.print(error8);              res.send(JSON.stringify({code:500,'msg':'更新订单失败'}));return;            }            if(res8.length > 0){              res.send(JSON.stringify({code:500,'msg':'该订单下还有'+res8.length+'个流程未完成，请确认全部完成后再操作'}));            }else if(res8.length == 0){              // 确认所有流程完成后，才能修改订单状态              sqlQuest = "update indent set status = ?, remark=? where id = ?";              sqlParam = [ parse.status, parse.remark, parse.id];              connection.latest().query(sqlQuest,sqlParam,function(error,res1){                  if(error){                    connection.print(error);                    res.send(JSON.stringify({code:500,'msg':'更新订单失败'}));                  }else{                    countIndentWorkTime(parse.id);// 订单完成后，结算订单工时                    res.send(JSON.stringify({code:200,'msg':'更新订单成功'}));                  }              })            }else{              res.send(JSON.stringify({code:500,'msg':'更新订单失败'}));              connection.redlog('流程数量不匹配，更新订单完成失败');            }          })      }else if(parse.status == 1 ){        sqlQuest = "update indent set status = 1, remark=? where id = ?;update `procedure` set status =1 where indentID = ? order by id limit 1;";        sqlParam = [parse.remark, parse.id, parse.id];        connection.latest().query(sqlQuest,sqlParam,function(error,res1){            if(error){              connection.print(error);              res.send(JSON.stringify({code:500,'msg':'更新订单失败'}));            }else{              res.send(JSON.stringify({code:200,'msg':'更新订单成功'}));            }        })      }else{        connection.latest().query(sqlQuest,sqlParam,function(error,res1){            if(error){                connection.print(error);                res.send(JSON.stringify({code:500,'msg':'更新订单失败'}));            }else{                res.send(JSON.stringify({code:200,'msg':'更新订单成功'}));            }        })      }  })  /*  *  *导出订单数据  *  */  // 获取所有订单状态列表(根据时间段查询)  app.get([frontRequestUrl+'/exportAllIndentStatusByDate'],function(req,res){      var userName = req.query.keyword?req.query.keyword:'';      var startDate = req.query.startDate?req.query.startDate:'';      var endDate = req.query.endDate?req.query.endDate:'';      var id = req.query.id?req.query.id:'';      var erp = req.query.erp?req.query.erp:'';      let priority = req.query.priority;      let ifNew = req.query.ifNew;      let name = '';      var sqlQuest = '';      var sqlParam = '';      if(startDate){        sqlQuest = 'select  a.*, indent.erp, indent.planNum, indent.planOnline, indent.planFinishDate, indent.actualStart, indent.actualFinish, indent.ifNew, indent.priority, indent.templateID, indent.status as pstatus, user.userName as duty from `procedure` a inner join indent on a.indentID = indent.id left join user on a.duty = user.userID where  (indent.planOnline >= ? and indent.planOnline <= ?) and ifDelete = 0 order by indentID, a.id';        sqlParam = [startDate.replace(/-/g,'.'), endDate.replace(/-/g,'.')];         name = '订单表'+startDate.replace(/-/g,'')+'-'+endDate.replace(/-/g,'');      }else{        sqlQuest = 'select  a.*, indent.erp, indent.planNum, indent.planOnline, indent.planFinishDate, indent.actualStart, indent.actualFinish, indent.ifNew, indent.priority, indent.templateID, indent.status as pstatus, user.userName as duty from `procedure` a inner join indent on a.indentID = indent.id left join user on a.duty = user.userID where ifDelete = 0 order by indentID, a.id';         name = '全部订单详细表';      }      if(ifNew){        sqlQuest = 'select  a.*, indent.erp, indent.planNum, indent.planOnline, indent.planFinishDate, indent.actualStart, indent.actualFinish, indent.ifNew, indent.priority, indent.templateID, indent.status as pstatus, user.userName as duty from `procedure` a inner join indent on a.indentID = indent.id left join user on a.duty = user.userID where ifDelete = 0 and indent.ifNew = 1 order by indentID, a.id';        name = '订单详细表-新品';      }else if(priority){        sqlQuest = 'select  a.*, indent.erp, indent.planNum, indent.planOnline, indent.planFinishDate, indent.actualStart, indent.actualFinish, indent.ifNew, indent.priority, indent.templateID, indent.status as pstatus, user.userName as duty from `procedure` a inner join indent on a.indentID = indent.id left join user on a.duty = user.userID where ifDelete = 0 and indent.priority = 1 order by indentID, a.id';        name = '订单详细表-优先';      }      let _headers = [          { k: 'erp', v: 'erp编号' },          { k: 'materialCode', v: '货号' },          { k: 'materialName', v: '货物名称' },          { k: 'planNum', v: '计划生产数量' },          { k: 'planOnline', v: '计划上线时间' },          { k: 'planFinishDate', v: '计划完成时间' },          { k: 'actualStart', v: '实际开始时间' },          { k: 'actualFinish', v: '实际完成时间' },          { k: 'name', v: '流程' },          { k: 'duty', v: '负责人员' },          { k: 'ifNew', v: '是否新品' },          { k: 'priority', v: '是否加急' },          { k: 'templateID', v: '模板编号' },          { k: 'status', v: '状态' }      ];      myExportData.getData(req, res, sqlQuest, sqlParam, name, _headers);  })  // 导出订单及对应流程表  app.get([frontRequestUrl+'/exportIndentMatchTemplete'],function(req,res){      // var sqlQuest = 'select a.erp, a.materialCode, materialName, b.name ,GROUP_CONCAT(b.`procedure`) as `procedure`,GROUP_CONCAT(b.duty) as `duty` from indent a INNER JOIN template b where templateID = b.id and a.ifDelete = 0 GROUP BY a.id ORDER BY a.id';      var sqlQuest = "select a.erp, a.materialCode, materialName, b.name ,b.`procedure`, b.duty from indent a INNER JOIN (select template.id,template.name, template.procedure,replace(GROUP_CONCAT(userName),',',' ') as duty  from template,user where duty like CONCAT('%',userID,'%') and  ifDelete = 0 GROUP BY template.id) b where templateID = b.id and a.ifDelete = 0  GROUP BY a.id ORDER BY a.id";      var sqlParam = '';      // connection.print("priority  ifNew===",  req.query, name);      var _headers = [          { k: 'erp', v: 'erp编号' },          { k: 'materialCode', v: '货号' },          { k: 'materialName', v: '货物名称' },          { k: 'name', v: '流程名称' },          { k: 'procedure', v: '详细流程' },          { k: 'duty', v: '流程对应负责人' }      ];      var name = '订单及对应流程表';      myExportData.getData(req, res, sqlQuest, sqlParam, name, _headers);  })  // 导出流程工时  app.get([frontRequestUrl+'/exportProcedureWorkHourByDate'],function(req,res){      var startTime = req.query.startTime?req.query.startTime:'';      var endTime = req.query.endTime?req.query.endTime:'';      var sqlQuest = '';      var sqlParam = '';      if(req.query.indentID){        sqlQuest =  "select a.*,user.userName as duty, i.erp,i.planNum,i.factor from `procedure` a inner join (select b.id,workhour.indentID, b.planNum,b.erp,factor.factor from indent b left join workhour on b.id = workhour.indentID left join factor on workhour.factor = factor.id) i on a.indentID = i.indentID left join user on a.duty = user.userID where indentID=? order by indentID";      }else{          sqlQuest =  "select a.*,user.userName as duty, i.erp,i.planNum,i.factor from `procedure` a inner join (select b.id,b.status,b.ifDelete,workhour.indentID, b.planNum,b.erp,factor.factor from indent b left join workhour on b.id = workhour.indentID left join factor on workhour.factor = factor.id where  b.ifDelete != 1) i on a.indentID = i.id left join user on a.duty = user.userID where a.status = 2 order by indentID";      }      sqlParam = [req.query.indentID];      var _headers = [          { k: 'erp', v: 'erp编号' },          { k: 'materialCode', v: '货号' },          { k: 'materialName', v: '货物名称' },          { k: 'name', v: '流程名称' },          { k: 'countHour', v: '总工时' },          { k: 'singleHour', v: '单数量工时' },          { k: 'factor', v: '权数' },          { k: 'countWorker', v: '总人数' },          { k: 'cost', v: '工时费' }      ];      let name = "流程工时表";      myExportData.getData(req, res, sqlQuest, sqlParam, name, _headers);  })  // 导出订单工时列表(根据时间段查询)  app.get([frontRequestUrl+'/exportWorkHourByDate', frontRequestUrl+'/listSystemUserByName'],function(req,res){      var startTime = req.query.startTime?req.query.startTime:'';      var endTime = req.query.endTime?req.query.endTime:'';      var sqlQuest = '';      var sqlParam = '';      if(startTime){        // sqlQuest = 'select * from workhour where startTime = ?, endTime = ?';        sqlQuest = "select  workhour.*,indent.planNum, indent.materialName, indent.actualStart,indent.actualFinish, factor.factor as factor from workhour left join indent on workhour.indentID = indent.id inner join factor on workhour.factor = factor.id where actualStart>? and actualFinish<? and indent.ifdelete!=1";        sqlParam = [startTime, endTime];      }else{        // sqlQuest = 'select workhour.*,indent.*,factor.factor as factor from workhour inner join indent on workhour.indentID = indent.id inner join factor on workhour.factor = factor.id';        sqlQuest = "select  workhour.*,indent.planNum, indent.materialName, indent.actualStart,indent.actualFinish, factor.factor as factor from workhour left join indent on workhour.indentID = indent.id inner join factor on workhour.factor = factor.id where indent.ifdelete!=1";      }      var _headers = [          { k: 'erp', v: 'erp编号' },          { k: 'materialCode', v: '货号' },          { k: 'materialName', v: '货物名称' },          { k: 'countHour', v: '总工时' },          { k: 'singleHour', v: '单数量工时' },          { k: 'factor', v: '权数' },          { k: 'countWorkers', v: '总人数' },          { k: 'cost', v: '工时费' }      ];      let name = "订单工时表";      myExportData.getData(req, res, sqlQuest, sqlParam, name, _headers);  })}module.exports = indent;