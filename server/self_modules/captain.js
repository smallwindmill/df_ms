/** 组长功能*/function verifyUse(str){    if(str){        return str;    }else{        return '';    }}const captain = (app, connection, moment) =>{  var frontRequestUrl = "/produceMS";  // 计算订单工时  var countIndentWorkTime = (indentID) => {    // var sqlQuest = 'select max(finishTime)-min(startTime) from proceduredetail where pid = ?';    // 该流程所用的时间（五位小数）    // var sqlQuest = 'update `procedure` a,(select ROUND(TIMESTAMPDIFF(MINUTE,min(startTime),max(finishTime))/60, 5) as ithour,max(finishTime),min(startTime), pid from proceduredetail where pid = ?) b set countHour = b.ithour where a.id = b.pid';    // var sqlQuest = 'insert into workhour(indentID, erp,materialCode,planNum,countHour,countWorkers) (select indentID, erp,materialCode,planNum,countHour,countWorkers from indent INNER JOIN  (select sum(countHour) as countHour,indentID,countWorkers from `procedure` INNER join (select sum(workercount) as countWorkers,pid from proceduredetail group by pid) pro_de  on pro_de.pid = `procedure`.id GROUP BY indentID) a on  indent.id = a.indentID where id = ?);select actulStartTime from indent where id=?';    var sqlQuest = 'insert into workhour(indentID, erp,materialCode,planNum,countHour,countWorkers) (select distinct indentID, erp,materialCode,planNum,countHour,countWorker from indent INNER JOIN  (select indentID,sum(countHour) as countHour,sum(countWorker) as countWorker from `procedure` group by indentID ) a on  indent.id = a.indentID where id = ?);select actualStart from indent where id=?';    var sqlParam = [indentID, indentID];    connection.query(sqlQuest,sqlParam,function(error,res1){        if(error){            console.log(error);        }else{          // 根据订单创建时间的权重计算          console.log(res1[1][0]);          var year = moment(new Date(res1[1][0].actualStart)).format('YYYY');          var month = moment(new Date(res1[1][0].actualStart)).format('MM');          // var sqlQuest = 'update workhour set factor = (select id from factor where year = ? and month = ? ) where indentID = ?;update workhour set singleHour = countHour/planNum,cost = (select a.factor from factor a,workhour b where a.id = b.factor and b.indentID = ?)*singleHour where indentID = ?';          var sqlQuest2 = 'update workhour set factor = (select id from factor where year = ? and month = ? ) where indentID = ?;select distinct a.factor from factor a,workhour b where a.id = b.factor and b.indentID = ?';          var sqlParam2 = [year, month, indentID, indentID, indentID];          connection.query(sqlQuest2,sqlParam2,function(error2,res2){              if(error2){                  console.log(error2);              }else{                  var sqlQuest3 = 'update workhour set singleHour = countHour/planNum,cost = ?*singleHour where indentID = ?';                  var sqlParam3 = [res2[1][0].factor, indentID];                  console.log(sqlQuest3, sqlParam3, res2[1][0].factor);                  connection.query(sqlQuest3,sqlParam3,function(error3,res3){                      if(error3){                          console.log(error3);                      }else{                         console.log('id为'+indentID+'的订单已完成，工时统计也完成');                      }                  })              }          })           // console.log('id为'+pid+'的订单已完成，工时统计也完成');        }    })  }  // 每次调用工时接口时，重新计算一遍数据  countIndentWorkTimeRepeat = (nextFun) => {    var sqlQuest = 'update workhour,factor set cost = factor.factor*singleHour where workhour.factor = factor.id';    connection.query(sqlQuest,function(error,res1){        if(error){            console.log(error);        }else{           // console.log('id为'+pid+'的流程已完成，工时统计也完成');           if(nextFun){              nextFun();           }        }    })  }  // 计算流程工时  var countProcedureWorkTime = (id) => {    // var sqlQuest = 'select max(finishTime)-min(startTime) from proceduredetail where pid = ?';    // 该流程所用的时间（两位小数）    // var sqlQuest = 'update `procedure` a set countHour = (select ROUND(TIMESTAMPDIFF(MINUTE,min(startTime),max(finishTime))/60,2),max(finishTime),min(startTime), pid from proceduredetail GROUP BY pid = ?) b where a.id = b.pid';    // var sqlQuest = 'update `procedure` a,(select ROUND(TIMESTAMPDIFF(MINUTE,min(startTime),max(finishTime))/60,2) as ithour,max(finishTime),min(startTime), pid from proceduredetail where pid = ?) b set countHour = b.ithour where a.id = b.pid';    var sqlQuest = 'update `procedure` a,(select sum(hourcount) as ithour,sum(workercount) as itworker, pid from proceduredetail where pid = ?) b set countWorker = b.itworker, countHour = b.ithour where a.id = b.pid';    connection.query(sqlQuest,[id],function(error,res1){        if(error){            console.log(error);        }else{           console.log('id为'+id+'的流程已完成，工时统计也完成');        }    })  }  // 流程完成消息发送  var insertMessage = (id, remark) => {    // var sqlQuest = 'select * from `procedure` where indentID = (select indentID from `procedure` where id = ?) and id > ?';    var sqlQuest = 'select * from `procedure` ,(select indentID as pid,name as lastName from `procedure` where id = ?) b where indentID = b.pid and id >= ?';    // var sqlParam = [parse.status, parse.remark, finishTime, parse.id];    var sqlParam = [id, id];    connection.query(sqlQuest,sqlParam,function(error,res1){        if(error){            console.log(error);        }else{           if(!res1.length){              // 订单内的流程已全部完成              countIndentWorkTime(indent);              return;           }           // 消息内容处理            remark = res1[0].lastName+'已完成,'+res1[0].name+'可开始生产//%//'+(remark || '');            // res.send(JSON.stringify({code:200,'msg':'状态更新成功', results: res1}));            var sqlQuest1 = "insert into message(userID, `from`, content, time, status) values(?,?,?,?,0)";            var sqlParam1 = [ res1[1].duty, res1[0].duty, remark, moment().format('YYYY.MM.DD HH:mm:ss')];            connection.query(sqlQuest1,sqlParam1,function(error2,res2){              // console.log(sqlQuest1, sqlParam1);                if(error){                    console.log(error);                }else{                  console.log('消息发送成功');                }            })        }    })  }  // 更新订单信息(计算订单工时)  app.post(frontRequestUrl+'/updateIndentInfo',function(req,res){      var parse = req.body;      // var sqlQuest = "update indent set planFinishDate = ?,planOnline = ?,actualStart=?,actualFinish=?,priority=?,ifNew=?,ifOutsource=?,duty=?,status = ?, remark=? where id = ?";      // 需要mysql语句处理的字段，可以不必拼接，直接放入下面的自动拼接语句里      var planFinishDate = parse.planFinishDate;      var planOnline = parse.planOnline;      var actualStart = parse.actualStart;      var actualFinish = parse.actualFinish;      if(planFinishDate) planFinishDate = planFinishDate.replace(/-/g,'.');      if(planOnline) planOnline = planOnline.replace(/-/g,'.');      if(actualStart) actualStart = actualStart.replace(/-/g,'.');      if(actualFinish) actualFinish = actualFinish.replace(/-/g,'.');      //      var sqlQuest = "update indent set planFinishDate = ?,planOnline = ?,actualStart=?,actualFinish=?,priority=?,ifNew=?,ifOutsource=?,status = ?, remark=? where id = ?";      var sqlParam = [planFinishDate, planOnline, actualStart, actualFinish, parse.priority, parse.ifNew, parse.ifOutsource, parse.status, parse.remark, parse.id];      if(parse.status){          sqlQuest = "update indent set status = ?, remark=? where id = ?";          sqlParam = [ parse.status, parse.remark, parse.id];      }      // console.log(sqlQuest, sqlParam);      connection.query(sqlQuest,sqlParam,function(error,res1){          if(error){              console.log(error);              res.send(JSON.stringify({code:500,'msg':'更新订单失败'}));          }else{              res.send(JSON.stringify({code:200,'msg':'更新订单成功'}));          }      })      if(parse.status && parse.status==1){        countIndentWorkTime(parse.id);      }  }) /* * *负责订单处理 */  // 获取用户负责的订单列表(根据状态查询)   app.get([frontRequestUrl+'/queryDutyProcedureByStatus', frontRequestUrl+'/queryDutyProcedureById'],function(req,res){      var userID = req.query.userID;      var id = req.query.id?req.query.id:'';       // var sqlQuest = 'select id,name,erp,materialCode,materialName,userName as duty,`procedure`, status from indent left join user on duty=user.userID';// where userName like "%'+userName+'%"';       var sqlQuest = '';// where userName like "%'+userName+'%"';       // var sqlQuest = 'select id, erp,materialCode, materialName, name as `procedure`,userName as duty,userID, status from `procedure` left join user on duty=userID where userID = ? or userName = ?';// where userName like "%'+userName+'%"';       // console.log(sqlQuest, userID);       var sqlParam;       if(id){        sqlQuest = 'select `procedure`.id,indent.erp, indent.materialCode, indent.materialName, `procedure`.name as `procedure`,userName as duty,userID, `procedure`.status from `procedure` left join user on  duty=userID  left join indent on indentID = indent.id where (userID = ?  or userName = ?) and `procedure`.id = ?';        sqlParam = [userID, userID, id];       }else{        sqlQuest = 'select `procedure`.id,indent.erp, indent.materialCode, indent.materialName, `procedure`.name as `procedure`,userName as duty,userID, `procedure`.status from `procedure` left join user on  duty=userID  left join indent on indentID = indent.id where userID = ?  or userName = ?';        sqlParam = [userID, userID];       }      // 存入用户名称与用户id的关系问题       connection.query(sqlQuest,sqlParam,function(error,res1,fileds){           if(error){               console.log(error);               res.send(JSON.stringify({code:500,msg:'查询负责订单状态失败',results:res1}));           }else{              // console.log(sqlQuest,sqlParam);               if(res1.length){                   res.send(JSON.stringify({code:200,msg:'查询负责订单状态成功',results:res1}));               }else{                   res.send(JSON.stringify({code:500,msg:'无该订单信息',results:res1}));               }           }       })   })  // 更新流程状态  app.post(frontRequestUrl+'/updateDutyProcedureStatus',function(req,res){      var parse = req.body;      var sqlQuest = "update `procedure` set status=?, remark = ? where id = ?";      var sqlParam = [parse.status || 1, parse.remark, parse.id];      // console.log(sqlQuest, sqlParam);      connection.query(sqlQuest,sqlParam,function(error,res1){          if(error){              console.log(error);              res.send(JSON.stringify({code:500,'msg':'更新出错'}));          }else{              res.send(JSON.stringify({code:200,'msg':'状态更新成功', results: res1}));          }      })      if(parse.status && parse.status == 1 ){        // 发送消息        insertMessage(parse.id, parse.remark);        // 计算当前流程的工时        countProcedureWorkTime(parse.id);      }      return;      // 如果状态为完成，流程状态与订单状态随之变化，并结束当前流程      if(parse.status && parse.status == 1 ){        var sqlQuest1 = "update `procedure` set status=? where id = ?";        connection.query(sqlQuest1,[1, parse.pid],function(error1,res1){            if(error1){                console.log(error1);                res.send(JSON.stringify({code:500,'msg':'更新出错'}));            }else{              // 消息通知下一流程              insertMessage(parse.pid, parse.remark);              // 计算当前流程的工时              countProcedureWorkTime(parse.pid);              // res.send(JSON.stringify({code:200,'msg':'状态更新成功', results: res1}));              /*var sqlQuest2 = "update indent set status = 1, remark = ? where id = (select indentID from `procedure` where id = ?);select indentID,erp from `procedure` where id = ?;";              connection.query(sqlQuest2,[parse.remark, parse.pid, parse.pid],function(error2,res2){                  if(error2){                      console.log(error2);                      res.send(JSON.stringify({code:500,'msg':'更新出错'}));                  }else{                    // 添加消息告知下一流程                      // res.send(JSON.stringify({code:200,'msg':'状态更新成功', results: res1}));                  }              })*/            }        })      }  })/*** 流程详细信息处理*/  // 获取所有流程细节记录  app.get(frontRequestUrl+'/queryProcedureInfo',function(req,res){      var parse = req.query;      var sqlQuest = "select * from `procedureDetail` where pid = '"+parse.pid+"'";      connection.query(sqlQuest,function(error,res1){          if(error){              console.log(error);              res.send(JSON.stringify({code:500,'msg':'获取流程细节失败'}));          }else{            /*connection.query(sqlQuest,function(error,res1){                if(error){                    console.log(error);                    res.send(JSON.stringify({code:500,'msg':'获取流程细节失败'}));                }else{                    res.send(JSON.stringify({code:200,'msg':'获取流程细节成功', results: res1}));                }            })*/              res.send(JSON.stringify({code:200,'msg':'获取流程细节成功', results: res1}));          }      })  })  // 新增流程细节记录  app.post(frontRequestUrl+'/addProcedureInfo',function(req,res){      var parse = req.body;      var sqlQuest0 = "select materialCode,materialName,duty from `procedure` where id = '"+parse.pid+"'";      connection.query(sqlQuest0,function(error,res0){        if(error){          console.log(error);return;        }        if(res0.length==0){           // res.send(JSON.stringify({code:500,'msg':'该流程已完成，请重新设置'}));           res.send(JSON.stringify({code:500,'msg':'该流程不存在，请检查后重试'}));        }else{          // 新增用户          var sqlQuest = "insert into procedureDetail(pid, productNum, worker, startTime, finishTime, remark, status, workercount) values(?, ?, ?, ?, ?, ?, ?, ?)";          var startTime = moment().format('YYYY.MM.DD HH:mm:ss');          var sqlParam = [parse.pid, parse.productNum, parse.worker, startTime, parse.finishTime, parse.remark, 0, parse.worker.split(' ').length];          connection.query(sqlQuest,sqlParam,function(error,res1){              if(error){                  console.log(error);                  res.send(JSON.stringify({code:500,'msg':'新增流程细节失败'}));              }else{                  connection.query("select * from procedureDetail where id = ?",[res1.insertId],function(error,res2){                      if(error){                          console.log(error);                          res.send(JSON.stringify({code:500,'msg':'新增流程细节失败'}));                      }else{                          console.log(res1);                          res.send(JSON.stringify({code:200,'msg':'新增流程细节成功', results: res2[0]}));                      }                  })              }          })        }      })  })  // 更新流程细节记录  app.post(frontRequestUrl+'/updateDutyProcedureDetailStatus',function(req,res){      var parse = req.body;      var sqlQuest = "update procedureDetail set status=?, remark = ?, finishTime=? where id = ?;update procedureDetail set hourcount = ROUND(TIMESTAMPDIFF(MINUTE,startTime,finishTime)/60,5) where id = ?";      var finishTime;      if(parse.status==1){        finishTime = moment().format('YYYY.MM.DD HH:mm:ss');      }      var sqlParam = [parse.status, parse.remark, finishTime, parse.id, parse.id];      connection.query(sqlQuest,sqlParam,function(error,res1){          if(error){              console.log(error);              res.send(JSON.stringify({code:500,'msg':'更新出错'}));          }else{              res.send(JSON.stringify({code:200,'msg':'状态更新成功', results: res1}));          }      })  })}module.exports = captain;